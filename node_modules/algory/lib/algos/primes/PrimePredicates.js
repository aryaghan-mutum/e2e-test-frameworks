"use strict";
/**
 * Algory
 *
 * Copyright (c) 2020 Anurag Muthyam <anu.drumcoder@gmail.com>
 * https://github.com/aryaghan-mutum
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPrimeOptimized = exports.isPrime = void 0;
const NumericalComputationPredicates_1 = require("../NumericalComputationPredicates");
const NumericalComputation_1 = require("../NumericalComputation");
const curry = require('curry');
/**
 * @remarks Returns a prime number if the number is prime, false otherwise
 * F?(n) => t or f
 *
 * @param n - An input number
 * @returns A boolean expression true if the number is prime
 */
exports.isPrime = curry((n) => {
    /**
     * @param num - An input number
     * @param count - A counter variable
     * @returns A boolean expression true if the number is prime
     */
    const primeIter = (num, count) => {
        if (n < 2)
            return false;
        else if (n === count)
            return true;
        else if (NumericalComputationPredicates_1.isZero(n % count))
            return false;
        else
            return primeIter(n, NumericalComputation_1.add1(count));
    };
    return primeIter(n, 2);
});
/**
 * @remarks Optimized prime checker procedure which returns a prime number if the number is prime, false otherwise
 * F?(n) => t or f
 */
exports.isPrimeOptimized = curry(
/**
 * @param n - An input number
 * @returns A boolean expression true if the number is prime
 */
(n) => (n < 2) ? false : optimizedPrimeIter(n, 2));
/**
 * @param n - An input number
 * @returns A boolean expression true if the number is prime
 */
const optimizedPrimeIter = (n, count) => {
    if (n === count)
        return true;
    else if (NumericalComputationPredicates_1.isZero(n % count))
        return false;
    else if (n < NumericalComputation_1.sqr(count))
        return true;
    else
        return optimizedPrimeIter(n, NumericalComputation_1.add1(count));
};
//# sourceMappingURL=PrimePredicates.js.map