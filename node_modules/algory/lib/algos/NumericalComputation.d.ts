/**
 * @remarks Square a number
 *  F(n) => (* n n)
 *
 * @param n - An input number
 * @returns Squared number
 */
export declare const sqr: any;
/**
 * @remarks Cube a number
 * F(n) => (* n n n)
 *
 * @param n - An input number
 * @returns Cubed number
 */
export declare const cube: any;
/**
 * @remarks Square two numbers and sum the returned values
 * F(n) => (+ (square x) (square y))
 */
export declare const sumOfSquares: any;
/**
 * @remarks Cube two numbers and sum the returned values
 * F(n) => (+ (cube x) (cube y))
 */
export declare const sumOfCubes: any;
/**
 * @remarks Double a number
 * F(n) => (* n 2) or F(n) => (+ n n)
 *
 * @param n - An input number
 * @returns Doubled number
 */
export declare const double: any;
/**
 * @remarks Triple a number.
 * F(n) => (* n 3) or F(n) => (+ n n n)
 */
export declare const triple: any;
/**
 * @remarks Add a number
 * F(n) => (+ n 1)
 */
export declare const add1: any;
/**
 * @remarks Subtract a number
 * F(n) => (- n 1)
 */
export declare const sub1: any;
/**
 * @remarks Subtract two numbers
 * F(n) => (- n 2)
 */
export declare const sub2: any;
/**
 * @remarks Get the minimum number between two numbers
 * F(x, y) => (< a b) ? a : b
 */
export declare const min: any;
/**
 * @remarks Get the maximum number between two numbers
 * F(x, y) => (> a b) ? a : b
 */
export declare const max: any;
/**
 * @remarks //TODO
 * @param base
 * @param n
 */
/**
 * @remarks Get an Absolute/modulus a number
 * F(n) => |n|
 */
export declare const abs: any;
/**
 * @remarks
 * F(n) => (/ n 2)
 */
export declare const half: any;
/**
 * @remarks An Average of two numbers
 * F(x, y) => (/ x y)
 */
export declare const avg: any;
/**
 * @remarks Reciprocal/Inverse a number
 * F(n) => (/ 1 n)
 */
export declare const reciprocal: any;
/**
 *
 * @remarks FIXME:
 *
 */
