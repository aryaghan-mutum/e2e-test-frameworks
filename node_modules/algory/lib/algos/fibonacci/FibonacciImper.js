"use strict";
/**
 * Algory
 *
 * Copyright (c) 2020. Anurag Muthyam <anu.drumcoder@gmail.com>
 * https://github.com/aryaghan-mutum
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.fibImper = void 0;
const NumericalComputationPredicates_1 = require("../NumericalComputationPredicates");
const err = require('../../TypeViolation');
const curry = require('curry');
/**
 * @remarks Fibonacci: Imperative Procedure
 *
 * @param n - Fibonacci index
 * @returns A Fibonacci number of a specific index using Imperative/Sequential approach
 */
exports.fibImper = curry((n) => {
    err.numberTypeViolationError(n);
    if (NumericalComputationPredicates_1.isNegative(n))
        throw new Error("Fibonacci for negative numbers do not exist");
    let x = 0;
    let y = 1;
    for (let i = 0; i < n; i++) {
        y = y + x;
        x = y - x;
    }
    return x;
});
//# sourceMappingURL=FibonacciImper.js.map