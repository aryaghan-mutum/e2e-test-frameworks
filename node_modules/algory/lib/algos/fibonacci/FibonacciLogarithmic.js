"use strict";
/**
 * Algory
 *
 * Copyright (c) 2020. Anurag Muthyam <anu.drumcoder@gmail.com>
 * https://github.com/aryaghan-mutum
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.fibLogarithmic = void 0;
const NumericalComputationPredicates_1 = require("../NumericalComputationPredicates");
const NumericalComputation_1 = require("../NumericalComputation");
const curry = require('curry');
/**
 * @remarks Fibonacci: Recursive Procedure with Logarithmic process
 * Logarithmic process for F(8):
 * >(fib-log 1 0 0 1 8)
 * >(fib-log 1 0 1 1 4)
 * >(fib-log 1 0 2 3 2)
 * >(fib-log 1 0 13 21 1)
 * >(fib-log 34 21 13 21 0)
 *
 * @param n - Fibonacci index
 * @returns A Fibonacci number of a specific index using Logarithmic process
 */
exports.fibLogarithmic = curry((n) => fibLogHelper(1, 0, 0, 1, n));
/**
 * @remarks Helper function for fibLogarithmic(n) which returns a Fibonacci number in O(log(n)) time
 * @param a
 * @param b
 * @param p
 * @param q
 * @param counter
 * @returns A Fibonacci number of a specific index using Logarithmic approach
 */
const fibLogHelper = (a, b, p, q, counter) => {
    if (NumericalComputationPredicates_1.isZero(counter)) {
        return b;
    }
    else if (NumericalComputationPredicates_1.isEven(counter)) {
        return fibLogHelper(a, b, NumericalComputation_1.sumOfSquares(p, q), (2 * p * q) + NumericalComputation_1.sqr(q), counter / 2);
    }
    else {
        return fibLogHelper((b * q) + (a * q) + (a * p), (b * p) + (a * q), p, q, NumericalComputation_1.sub1(counter));
    }
};
//# sourceMappingURL=FibonacciLogarithmic.js.map