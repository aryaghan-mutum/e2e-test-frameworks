/**
 * Algory
 *
 * Copyright (c) Anuragn Muthyam <anu.drumcoder@gmail.com>
 * https://github.com/aryaghan-mutum
 *
 */
/**
 * @remarks Return true if the "n" is 0, false otherwise
 * F?(n) => (= n 0) ? true : false
 */
export declare const isZero: any;
/**
 * @remarks Return true if the "n" is 1, false otherwise
 * F?(n) => (= n 1) ? true : false
 */
export declare const isOne: any;
/**
 * @remarks Return true if the "n" is negative, false otherwise
 * F?(n) => (< n 0) ? true : false
 */
export declare const isNegative: any;
/**
 * @remarks Return true if the "n" is positive, false otherwise
 * F?(n) => (>= n 0) ? true : false
 */
export declare const isPositive: any;
/**
 * @remarks Return true if the "n" is lesser Than and equal to zero, false otherwise
 * F?(n) => (<= n 0) ? true : false
 */
export declare const isLesserThanAndEqualToZero: any;
/**
 * @remarks Return true if the "x" is lesser than "y", false otherwise
 * lesserThan() is analogous to the operator "<"
 * F?(n) => (< x y)
 */
export declare const lesserThan: any;
/**
 * @remarks Return true if the "x" is greater than "y", false otherwise
 * greaterThan() is analogous to the operator ">"
 * F?(n) => (> x y)
 */
export declare const greaterThan: any;
/**
 * @remarks Return true if the sum of the returned value of first two formal parameter values
 * is lesser than the third argument's value", false otherwise
 * F?(n) => (< (+ x y) z)
 */
export declare const isSumLesser: any;
/**
 * @remarks Return true if the sum of the returned value of first two formal parameter values
 * is greater than the third argument's value", false otherwise
 * F?(n) => (> (+ x y) z)
 */
export declare const isSumGreater: any;
/**
 * @remarks Return true if the "n" is an even number
 * F?(n) => (= (% (abs n) 2) 0) ? true : false
 */
export declare const isEven: any;
/**
 * @remarks Return true if the "n" is an odd number
 * F?(n) => (!= (% (abs n) 2) 0) ? true : false
 */
export declare const isOdd: any;
