"use strict";
/**
 * Algory
 *
 * Copyright (c) Anurag Muthyam <anu.drumcoder@gmail.com>
 * https://github.com/aryaghan-mutum
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.absLst = exports.reciprocalLst = exports.doubleLst = exports.cubeLst = exports.sqrLst = exports.avgLst = exports.isEmpty = exports.car = void 0;
const NumericalComputation_1 = require("./NumericalComputation");
const curry = require('curry');
/**
 * @remarks
 * @param lst - unsorted list
 * @returns The first number from a list
 */
exports.car = curry((arr) => arr[0]);
/**
 * @remarks Return a boolean expression true if the list if empty, false otherwise.
 *
 * @param arr - A list of numbers
 * @returns A boolean expression true or false
 */
exports.isEmpty = curry((arr) => {
    return (arr.length === 0) ? true : false;
});
/**
 * @remarks The Sum of Average of numbers in an array
 * F([a, b, c ... n]) => (/ (+ a, b, c ... n) n)
 *
 * @param arr - A list of numbers
 * @returns The sum of average of numbers in a list
 */
exports.avgLst = curry((arr) => {
    const total = arr.length;
    let sum = arr.reduce((a, b) => a + b);
    return sum / total;
});
/**
 * @remarks A List of Squared numbers
 * F([a,b,c ... n]) = [(sqr a) (sqr b) (sqr c) ... sqr(n)]
 *
 * @param arr - A list of numbers
 * @returns A list of Squared numbers
 */
exports.sqrLst = curry((arr) => {
    return arr.map((n) => NumericalComputation_1.sqr(n));
});
/**
 * @remarks A List of Cubed numbers
 * F([a,b,c ... n]) = [(cube a) (cube b) (cube c) ... cube(n)]
 *
 * @param arr - A list of numbers
 * @returns A list of Cubed numbers
 */
exports.cubeLst = curry((arr) => {
    return arr.map((n) => NumericalComputation_1.cube(n));
});
/**
 * @remarks A List of Doubled numbers
 * F([a,b,c ... n]) = [(double a) (double b) (double c) ... double(n)]
 *
 * @param n - A list of numbers
 * @return A list of doubled numbers
 */
exports.doubleLst = curry((arr) => {
    return arr.map((n) => NumericalComputation_1.double(n));
});
/**
 * @remarks A List of Reciprocal/Inverse numbers
 * F([a,b,c ... n]) = [(/ 1 a) (/ 1 b) (/ 1 c) ... (/ 1 n)]
 *
 * @param n - A list of numbers
 * @returns A list of Reciprocal numbers
 */
exports.reciprocalLst = curry((arr) => {
    return arr.map((n) => NumericalComputation_1.reciprocal(n));
});
/**
 * @remarks A List of Reciprocal/Inverse numbers
 * F([a,b,c ... n]) = [(abs a) (abs b) (abs c) ... (abs n)]
 *
 * @param n - A list of numbers
 * @returns A list of absolute |x| numbers
 */
exports.absLst = curry((arr) => {
    return arr.map((n) => NumericalComputation_1.abs(n));
});
//# sourceMappingURL=ListComputation.js.map