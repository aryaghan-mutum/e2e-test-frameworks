"use strict";
/**
 * Algory
 *
 * Copyright (c) Anuragn Muthyam <anu.drumcoder@gmail.com>
 * https://github.com/aryaghan-mutum
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isOdd = exports.isEven = exports.isSumGreater = exports.isSumLesser = exports.greaterThan = exports.lesserThan = exports.isLesserThanAndEqualToZero = exports.isPositive = exports.isNegative = exports.isOne = exports.isZero = void 0;
const numer = require('./NumericalComputation');
const curry = require('curry');
const err = require('../TypeViolation');
/**
 * @remarks Return true if the "n" is 0, false otherwise
 * F?(n) => (= n 0) ? true : false
 */
exports.isZero = curry(
/**
 * @param n
 * @returns
 */
(n) => {
    err.numberTypeViolationError(n);
    return (n === 0) ? true : false;
});
/**
 * @remarks Return true if the "n" is 1, false otherwise
 * F?(n) => (= n 1) ? true : false
 */
exports.isOne = curry(
/**
 * @param n
 * @returns
 */
(n) => {
    err.numberTypeViolationError(n);
    return (n === 1) ? true : false;
});
/**
 * @remarks Return true if the "n" is negative, false otherwise
 * F?(n) => (< n 0) ? true : false
 */
exports.isNegative = curry(
/**
 * @param n
 * @returns
 */
(n) => {
    err.numberTypeViolationError(n);
    return (n < 0) ? true : false;
});
/**
 * @remarks Return true if the "n" is positive, false otherwise
 * F?(n) => (>= n 0) ? true : false
 */
exports.isPositive = curry(
/**
 * @param n
 * @returns
 */
(n) => {
    err.numberTypeViolationError(n);
    return (n >= 0) ? true : false;
});
/**
 * @remarks Return true if the "n" is lesser Than and equal to zero, false otherwise
 * F?(n) => (<= n 0) ? true : false
 */
exports.isLesserThanAndEqualToZero = curry(
/**
 * @param n
 * @returns
 */
(n) => {
    err.numberTypeViolationError(n);
    return (n <= 0) ? true : false;
});
/**
 * @remarks Return true if the "x" is lesser than "y", false otherwise
 * lesserThan() is analogous to the operator "<"
 * F?(n) => (< x y)
 */
exports.lesserThan = curry(
/**
 * @param x
 * @param y
 * @returns
 */
(x, y) => {
    return x < y;
});
/**
 * @remarks Return true if the "x" is greater than "y", false otherwise
 * greaterThan() is analogous to the operator ">"
 * F?(n) => (> x y)
 */
exports.greaterThan = curry(
/**
 * @param x
 * @param y
 * @returns
 */
(x, y) => {
    return x > y;
});
/**
 * @remarks Return true if the sum of the returned value of first two formal parameter values
 * is lesser than the third argument's value", false otherwise
 * F?(n) => (< (+ x y) z)
 */
exports.isSumLesser = curry(
/**
 * @param x
 * @param y
 * @param z
 * @returns
 */
(x, y, z) => {
    return (x + y) < z;
});
/**
 * @remarks Return true if the sum of the returned value of first two formal parameter values
 * is greater than the third argument's value", false otherwise
 * F?(n) => (> (+ x y) z)
 */
exports.isSumGreater = curry(
/**
 * @param x
 * @param y
 * @param z
 * @returns
 */
(x, y, z) => {
    return (x + y) > z;
});
/**
 * @remarks Return true if the "n" is an even number
 * F?(n) => (= (% (abs n) 2) 0) ? true : false
 */
exports.isEven = curry(
/**
 * @param n
 * @returns
 */
(n) => {
    err.numberTypeViolationError(n);
    return numer.abs(n) % 2 == 0 ? true : false;
});
/**
 * @remarks Return true if the "n" is an odd number
 * F?(n) => (!= (% (abs n) 2) 0) ? true : false
 */
exports.isOdd = curry(
/**
 * @param n
 * @remarks
 */
(n) => {
    err.numberTypeViolationError(n);
    return numer.abs(n) % 2 !== 0 ? true : false;
});
//# sourceMappingURL=NumericalComputationPredicates.js.map